'use strict'

// const {VKApi, ConsoleLogger, BotsLongPollUpdatesProvider} = require('node-vk-sdk')
const VkBot = require('node-vk-bot-api');
const moment = require('moment')
const Redis = require('ioredis')
const logger = require('justewg-common/utils/logger')()

const req = require('justewg-common/utils/req')
const sessionClass = require('../classes/session')
const clientsClass = require('../classes/clients')

const errors = require('../errors')


const { Telegraf } = require('telegraf')
const fs = require('fs')


require('dotenv').config()


let ctx = {}
let messageEvents = []


/**
 * –ö–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞ —á–∞—Ç–±–æ—Ç–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –í–ö
 */
class ewgVKBot {
    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞
     */
    constructor(args = {}) {
        this.commands = require('../config/bot_commands')
        this.id = null
        this.token = null
        this.type = null
        this.group_id = null
        this.app_id = null
        this.chat_id = null
        this.user = null
        this.users = {}
        this.interval = 1
        this.LogTelegramChatId = process.env.LOG_TG_GROUP_ID
        this.cacher = null
        this.cache_prefix = 'vkbot_'
        this.server = null
        this.transport = null
        this.state = {
            tm: moment.now(),
            state: 'idle'
        }

        const keys = Object.keys(args)
        for (let i = 0; i < keys.length; i++) {
            this[keys[i]] = args[keys[i]]
        }
    
        this.log_prefix = `–ë–æ—Ç ${this.code}: `

        if (this.token && this.token !== '') {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç —á–∞—Ç–±–æ—Ç-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
            if (this.type === 'vk_chat_bot') {
                this.transport = new VkBot({ token: this.token })
            } else if (this.type === 'tg_chat_bot') {
                this.transport = new Telegraf(this.token)
            } else {
                logger.error(`${this.log_prefix}–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –±–æ—Ç–∞: ${this.type}`)
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Ä–µ–¥–∏—Å-–∫—ç—à–µ—Ä
            this.cacher = new Redis({
                port: process.env.REDIS_PORT,
                host: process.env.REDIS_HOST,
                db: process.env.REDIS_DATABASE,
                password: process.env.REDIS_PASSWORD,
            })
        } else {
            logger.error(Object.assign(errors.getByCode(1103)))
        }

        if (this.transport !== null) {
            logger.log(`${this.log_prefix}–°–æ–∑–¥–∞–Ω`)
        }
    }

    async getClient (ctx) {
        let args = {
            enabled: true,
            type: this.type,
            options: {
                token: this.token
            }
        }
        const cl = new clientsClass({log_prefix: this.log_prefix})
        return await cl.search(ctx, args)
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook-–∫–æ–ª–ª–±—ç–∫ –≤ —Å–ª—É—á–∞–µ Telegram-—á–∞—Ç–±–æ—Ç–∞
     *
     * @returns {Promise.<void>}
     */
    async setCallBacks () {
        await this.transport.telegram.setWebhook(process.env.IAC_API + '/tgbot/callback', {
            source: process.env.PATH_TO_API_CERTIFICATE
        })

        this.transport.startWebhook('/tgbot/callback')
    }

    /**
     * –û–±—â–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param method - HTTP-–º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
     * @param url - URL –∑–∞–ø—Ä–æ—Å–∞
     * @param args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise.<{success: boolean}>}
     * @private
     */
    async __request (ctx, method, url, args = {}) {
        let result = { success: false }
        
        logger.log(`${this.log_prefix}–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${method}-–∑–∞–ø—Ä–æ—Å –∫–æ –≤–Ω–µ—à–Ω–µ–º—É API: ${args.API_URL || process.env.IAC_API}${url}`)
        ctx.session = await (new sessionClass()).getSession()
        
        await req.make(ctx, url, Object.assign({
            API_URL: args.API_URL || process.env.IAC_API,
            method: method
        }, args)).then( response => {
            if (response.status === 200) {
                result = Object.assign(
                    result,
                    { success: true },
                    response
                )
                if (!result.hasOwnProperty('data') || result.data.length === 0) {
                    result.data = []
                }
            } else {
                result = Object.assign(
                    result,
                    { success: true },
                    response
                )
            }
        }).catch( reason => {
            // TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤ –ê–ü–ò —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è success true –∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            result = Object.assign(
                result,
                reason,
                { reason: reason }
            )
        })
        
        return result
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     *
     * @returns {{tm: number, state: *}|*}
     */
    getCurrentState () {
        return this.state
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤ –æ–±—ä–µ–∫—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –≤ storage
     *
     * @param state
     * @returns {Promise.<*>}
     */
    async setCurrentState (state) {
        this.state = {
            tm: moment.now(),
            state: state
        }
        return await this.storage.set(`${this.cache_prefix}${this.id}_state`, JSON.stringify(this.state))
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–º–ø–æ—Ä—Ç–∞ –ø–æ –∑–∞–¥–∞—á–µ, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤ storage
     *
     * @returns {Promise.<*>}
     */
    async getPreviousState () {
        const cached = await this.storage.get(`${this.cache_prefix}${this.id}_state`)
        let state = null
        try {
            state = JSON.parse(cached)
        } catch (e) {
            logger.error(e)
        }
        return state
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–ª–∞–≥ —Ç–æ–≥–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ -- –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–µ
     *
     * @param data - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @returns {*}
     */
    isServiceMessage (data) {
        return (data && data.message && (data.message.new_chat_member || data.message.left_chat_member))
    }
    
    /**
     * –°—Ç–∞—Ä—Ç—É–µ—Ç HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param port - –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {*}
     */
    setServer(ctx, port) {
        const self = this
        
        const express = require('express');
        const bodyParser = require('body-parser');

        // –°—Ç–∞—Ä—Ç—É–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        this.server = express()
    
        this.server.use(bodyParser.json())
        this.server.use(bodyParser.urlencoded({ extended: true }))
    
        this.server.get('/test', (req, res) => {
            res.send("<html><head><script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js\" integrity=\"sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script></head><body></body></html>")
        })

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–ö-–∫–æ–ª–ª–±—ç–∫–æ–≤
        this.server.post('/callback', async (req, res, next) => {
            const data = req.body

            let txt = null
            let result = { success: true }

            if (self.isServiceMessage(data)) {
                if (data && data.message && data.message.new_chat_member) {
                    txt = `–ß–∞—Ç–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É ${data.message.chat.title} (üÜî: <code>${data.message.chat.id}</code> )`
                    data.message.text = '/subscribe:every'
                    result = await self.manageMessage(ctx, data)
                }
                if (txt) {
                    try {
                        await self.transport.telegram.sendMessage(self.LogTelegramChatId, txt, {parse_mode: 'HTML'})
                    } catch (e) {
                        logger.error(e)
                    }
                }
            } else if (
                (self.type === 'vk_chat_bot' && ('' + data.group_id) === ('' + self.group_id))
                || (self.type === 'tg_chat_bot')
            ) {
                if (data.type === 'confirmation' && ('' + data.group_id) === self.group_id) {
                    res.send(self.options.vk_confirmation_code)
                } else {
                    try {
                        result = await self.manageMessage(ctx, data)
                        if (result.success !== true) {
                            logger.error(result.error)
                        }
                    } catch (e) {
                        result.error = '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞'
                        result.reason = e
                        logger.error(e)
                    }
                    // self.webhookCallback(req, res, next)
                }
            }
            res.send(result)
        })
    
        this.server.listen(port)
    
        logger.log(`${this.log_prefix}–°–µ—Ä–≤–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—è —Å –æ–¥–Ω–∏–º –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–º–∞–Ω–¥
     *
     * @param msg - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param cmd - –û–±—ä–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π —á–∞—Ç–±–æ—Ç–æ–º –∫–æ–º–º–∞–Ω–¥—ã
     * @returns {boolean} –§–ª–∞–≥ —Ç–æ–≥–æ, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥ –∫–æ–º–º–∞–Ω–¥—É
     */
    checkCommands(msg, cmd) {
        let exact = false
        if (!msg.hasOwnProperty('text')) {
            return false
        }
        if (cmd.hasOwnProperty('pattern')) {
            try {
                exact = msg.text.match(new RegExp(cmd.pattern.replace(/[/]/g, '\\/')))
            } catch (e) {
                logger.error(e)
            }
            if (exact === null) {
                exact = false
            }
        } else if (cmd.hasOwnProperty('text')) {
            exact = msg.text === cmd.text
        }
        return exact
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ storage ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
     *
     * @returns {Promise.<*>}
     */
    async getLastIndex () {
        let lastIndex = null
        await this.storage
            .get(`${this.cache_prefix}${this.id}_last_sended_problem_id`)
            .then( (result) => {
                try {
                    if (result !== '' ) {
                        lastIndex = parseInt(result, 10)
                    }
                } catch (e) {
                    logger.error(e)
                }
            })
        if (!lastIndex || lastIndex === 0 || typeof lastIndex === 'undefined') {
            logger.error('!!!!!!! FATAL ERROR: –ù–ï–¢ ID –ü–û–°–õ–ï–î–ù–ï–ì–û –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –í –ë–î –ü–û –ó–ê–î–ê–ß–ï ' + this.id)
            lastIndex = 0
        }
        return lastIndex
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –¥–∞–π–¥–∂–µ—Å—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è—Ö
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param type - –¢–∏–ø –¥–∞–π–¥–∂–µ—Å—Ç–∞
     * @returns {Promise.<{success: boolean}>}
     */
    async getProblemsStat (ctx, type) {
        let from = null
        let url = '/api/stat/'
        if (this.options && this.options.hasOwnProperty('buildings')) {
            url += 'by_buildings/' + this.options.buildings.join(',')
        } else if (this.options && this.options.hasOwnProperty('reasons')) {
            url += 'by_reasons/' + this.options.reasons.join(',')
        } else {
            url += 'global/'
        }
        switch (type) {
            case 'global':
                break;
            case 'weekly':
                from = moment().subtract(7, 'days')
                break;
            case 'daily':
                from = moment().subtract(1, 'day')
                break;
        }
        url += (from ? '?from=' + from.format('YYYY-MM-DDTHH:mm:ss') : '')
        const API_URL = process.env.IAC_API
    
        return await this.__request(ctx, 'GET', url, { API_URL })
    }
    
    /**
     *
     * @param peer_id
     * @param txt
     * @param attachments
     * @returns {Promise.<*>}
     */
    async sendMessage (peer_id, txt, attachments) {
        function sleep (time) {
            return new Promise((resolve) => setTimeout(resolve, time));
        }
        if (this.type === 'vk_chat_bot') {
            return await this.transport.sendMessage(peer_id, txt, {parse_mode: 'MarkdownV2'})
        } else if (this.type === 'tg_chat_bot') {
            if (attachments && attachments.length > 0) {
                logger.log(`${this.log_prefix}–®–ª–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${attachments[0]} –≤ ${peer_id}`)
                try {
                    await this.transport.telegram.sendPhoto(peer_id, { source: attachments[0] } )
                    return await sleep(1000).then(async () => {
                        return await this.transport.telegram.sendMessage(peer_id, txt, {parse_mode: 'HTML'})
                    })
                } catch (e) {
                    logger.error(e)
                    return { success: false, error: e}
                }
            } else {
                return await this.transport.telegram.sendMessage(peer_id, txt, {parse_mode: 'HTML'})
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –í–ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º
     * –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–º–∞–Ω–¥
     *
     * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * @param message - –û–±—ä–µ–∫—Ç callback-—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –í–ö
     * @returns {Promise.<{success: boolean}>}
     */
    async manageMessage(ctx, message) {
        let result = { success: false }

        let response = await this.cacher.get('vkbot_message_events') || "[]"
        try {
            const messageEventsResponse = JSON.parse(response)
            if (Array.isArray(messageEventsResponse)) {
                messageEvents = messageEventsResponse
            }
        } catch (e) {
            result.error = '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∫—ç—à-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞'
            result.reason = e
            return result
        }

        let msg = null
        let authType = null
        if (this.type === 'vk_chat_bot') {
            authType = 'vk'
            msg = message && message.object && message.object.message && message.object.message
        } else if (this.type === 'tg_chat_bot') {
            authType = 'telegram'
            msg = message && message.message
            message.event_id = message.update_id
        }

        if (!msg) {
            result.error = 'Callback –±–µ–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
            result.reason = message
            return result
        }

        let chatId = null
        if (this.type === 'vk_chat_bot') {
            chatId = msg.peer_id
        } else if (this.type === 'tg_chat_bot') {
            chatId = msg.chat.id
        }
        if (!chatId) {
            result.error = 'Callback –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID —á–∞—Ç–∞'
            result.reason = message
            return result
        }
        let msgText = msg.text
        if (!msgText) {
            result.error = 'Callback –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è'
            result.reason = message
            // return result
        }
        let output

        const user = new (require('./user'))({log_prefix: this.log_prefix})
        let uid = null
        if (this.type === 'vk_chat_bot') {
            uid = parseInt(msg.from_id, 10)
        } else if (this.type === 'tg_chat_bot') {
            uid = parseInt(msg.from.id, 10)
        }
        user.provider = authType
        user.id = uid
        user.username = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${uid}`
        user.options = {}
        let userResponse = await user.getByAuthProviderId(ctx, authType, uid)
        if (userResponse.success !== true) {
            userResponse = await user.add(ctx)
        }
        if (userResponse.success === true) {
            this.user = Object.assign(userResponse.data, {
                group_id: message.group_id,
                chat_id: chatId
            })
            this.users[user.id] = this.user
            
            let ok = false
            for (let i = 0; i < this.commands.length; i++) {
                ok = this.checkCommands(msg, this.commands[i])
                if (ok !== false) {

                    result = { success: false }

                    if (messageEvents.indexOf(message.event_id) === -1) {
                        try {
                            output = await this.commands[i].handler(ctx, this, message, ok)
                            if (output.success === false) {
                                logger.error('–û—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ', msg.text || msg.event_id, output.error)
                                await this.sendMessage(msg.peer_id, output.error)
                            }
                            messageEvents.push(message.event_id)
                            await this.cacher.set('vkbot_message_events', JSON.stringify(messageEvents))
                            result.success = true
                            result.data = `${this.log_prefix}–ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`
                        } catch (e) {
                            logger.error(e)
                            result.error = `${this.log_prefix}–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞`
                            result.reason = e
                        }
                    } else {
                        result.error = `${this.log_prefix}–°–æ–æ–±—â–µ–Ω–∏–µ #${message.event_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ`
                    }
                    break;
                } else {
                    result.error = `${this.log_prefix}–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞`
                }
            }
        } else {
            // logger.error(`${this.log_prefix}–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, userResponse.error, userResponse.reason)
            result.error = userResponse.error
        }

        return result
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ê–ü–ò –≤ –í–ö
    async setImporter(args = {}) {
        // –ù–∞—Å–ª–µ–¥—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–µ–Ω–∏—è –æ—Ç workers/index
        if (args.ctx) {
            ctx = Object.assign({}, ctx, args.ctx)
        }

        try {
            const importerClass = require('./import')
            this.importer = new importerClass(Object.assign({}, args, {
                bot: this,
                log_prefix: this.log_prefix
            }))
            await this.importer.start({ctx: ctx})
        } catch (e) {
            logger.error(e)
        }
    }
 }

module.exports = ewgVKBot
