'use strict';

const logger = require('justewg-common/utils/logger')();
const workerpool = require('workerpool')

const sessionClass = require('../classes/session')
const clientsClass = require('../classes/clients')

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏-–∑–∞–¥–∞—á–∞–º–∏
const TASKS_DIR = 'tasks'

// –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª —Å –∫–∞–∂–¥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏-–∑–∞–¥–∞—á–µ
const DEFAULT_TASK_FILENAME = 'runner.js'

// –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let ctx = {}

let pool = null
let session = null

const log_prefix = 'APP: '

/**
 * –ö–ª–∞—Å—Å –ø—É–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
 *
 * @constructor
 */
function Runner () {
    let self = this
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ—Ä–∫–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
     *
     * @param taskFolder - –ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –∑–∞–¥–∞—á–µ–π
     * @param args - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á–∏
     * @returns {Pool}
     */
    self.addWorker = async (taskFolder, args = {}) => {
        pool = workerpool.pool(`${taskFolder}/${DEFAULT_TASK_FILENAME}`)
        if (pool) {
            try {
                await pool
                    .exec('runner',
                        [args],
                        {
                            workerType: 'auto',
                            on: (payload) => {
                                logger.log(payload.status)
                            }
                        }
                    )
                    .catch(function (err) {
                        logger.log('catch')
                        logger.error(err)
                        pool.terminate() // terminate all workers when done
                    })
            } catch (e) {
                logger.error(e)
            }
        }
        return pool
    }
    
    /**
     * –°—Ç–∞—Ä—Ç—É–µ—Ç —Å–µ—Å—Å–∏—é, –ø–æ–ª—É—á–∞–µ—Ç API-—Ç–æ–∫–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–µ—Å—Å–∏—é
     *
     * @returns {Promise.<void>}
     */
    const startSession = async () => {
        try {
            session = new sessionClass()
            await session.getToken(ctx)
            await session.startChecking(ctx)
        } catch (err) {
            logger.error(err)
        }
        ctx = { session: session }
    }
    
    /**
     * –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏–∑ –Ω–∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π –ø—É–ª, –∑–∞–ø—É—Å–∫–∞—è –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å –∑–∞–¥–∞—á–∏ –ø–æ –∏—Ö —Ç–∏–ø–∞–º
     *
     * @returns {Promise.<void>}
     */
    self.run = async () => {
        let folder

        await startSession()
        ctx.session = await session.getSession()

        if (!ctx.session.token || typeof ctx.session.token === 'undefined') {
            logger.error(`${log_prefix}–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ API. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`)
        } else {
            const clients = await (new clientsClass()).all(ctx)

            if (clients.success === true && clients.data.length > 0) {
                try {
                    for (let i = 0; i < clients.data.length; i++) {

                        // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≤ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö - —Ç–æ—Ç –∂–µ –ø—É–±–ª–∏—á–Ω—ã–π —Ö–æ—Å—Ç, —á—Ç–æ –∏ –≤ .env
                        if (clients.data[i].enabled === true && clients.data[i].host === process.env.APP_PUBLIC_HOST) {

                            switch (clients.data[i].type) {
                                case 'vk_chat_bot':
                                case 'tg_chat_bot':
                                    folder = 'vk_tg_chat_bot'
                                    break;
                                default:
                                    folder = clients.data[i].type
                                    break;
                            }
    
                            // TODO –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞–ø–∫–∏ —Å —Ç–∏–ø–æ–º –ø—Ä–æ–µ–∫—Ç–∞
                            await self.addWorker(
                                `${__dirname}/${TASKS_DIR}/${folder}`,
                                {
                                    ctx: ctx,
                                    idx: i + 1,
                                    client_id: clients.data[i].id
                                }
                            )
                        }
                    }
                    await self.addWorker(`${__dirname}/${TASKS_DIR}/vk_callbacks_proxy`, {ctx: ctx})
                } catch (e) {
                    logger.error(e)
                }
            } else {
                logger.error('–ù–µ—Ç –Ω–∞–π–¥–µ–Ω—ã API-–∫–ª–∏–µ–Ω—Ç—ã –≤ –ë–î, –æ—à–∏–±–∫–∞:', clients.reason)
            }
        }
    }
    
    return self
}

logger.log('üî∏Ô∏è  Workers Runner initiated')

module.exports = Runner;
